module fpga_top (
    rst_ni: input  'a reset_async_low,
    tck_i : input  'a clock          ,
    tdo_o : output 'a logic          ,
    tdi_i : input  'a logic          ,
    tms_i : input  'a logic          ,

    // interface
    led0: output 'b logic,
    led1: output 'b logic,
    led2: output 'b logic,
    led3: output 'b logic,
    btn0: input  'b logic,
    btn1: input  'b logic,
) {
    // instantiate the oscillator primitive in ../oscillator.sv
    var clk: 'b clock;
    inst osc: $sv::OSC_TOP (
        clk: clk,
    );
    var rst_b: 'b reset_async_low;
    // i think this is completely safe since the reset is async...
    unsafe (cdc) {
        assign rst_b = rst_ni;
    }
    var prog_data: 'b logic<8>;
    var prog_rdy : 'b logic   ;
    inst prog: Programmer (
        rst_a_ni: rst_ni   ,
        tck_i              ,
        tdo_o              ,
        tdi_i              ,
        tms_i              ,
        clk_i   : clk      ,
        rst_b_ni: rst_b    ,
        data_o  : prog_data,
        rdy_o   : prog_rdy ,
    );
    // some memory for testing
    var read    : 'b logic         ;
    var memory  : 'b logic<8>  [16];
    var idx     : 'b logic<5>      ;
    var pressed : 'b logic         ;
    var debounce: 'b logic<25>     ;
    var write_idx: 'b logic<4>;
    always_ff (clk, rst_b) {
        if_reset {
            write_idx = 0;
            idx      = 0;
            debounce = 0;
            pressed  = 0;
            memory   = '{'h12, 'h34, 'h56, 'h78, 'h9A, 'hBC, 'hDE, 'hF1, 'h23, 'h45, 'h67, 'h89, 'hAB, 'hCD, 'hEF, 'h1F};
            read     = 0;
        } else {
            // debounce just counts cycles to debounce the buttons
            if debounce == 0 {
                // on btn0 / btn1 edge
                if (btn0 && !pressed) {
                    // increase / decrease the displayed memory index
                    idx     += 1;
                    pressed =  1;
                } else if btn1 && !pressed {
                    idx     -= 1;
                    pressed =  1;
                } else if !btn0 && !btn1 {
                    // if buttons are released, reset the edge tracker
                    pressed = 0;
                }
            } else {
                debounce += 1;
            }
            // if programmer has a byte for us and we haven't read it
            if prog_rdy && !read {
                // set the current memory byte to the received byte
                memory[write_idx] = prog_data;
                write_idx += 1;
                // but only once
                read = 1;
            } else if (!prog_rdy && read) {
                read = 0;
            }
        }
    }
    // idx >> 1 as 4 is the "byte pointer"
    // modulo points within the byte so byte[7:4] or byte[3:0]
    // we do this since we only have 4 leds.
    let modulo: 'b logic<4> = if (idx[0] == 1) ? 4 : 0;
    assign led0   = memory[(idx >> 1) as 4][(0 + modulo) as 3] as 1;
    assign led1   = memory[(idx >> 1) as 4][(1 + modulo) as 3] as 1;
    assign led2   = memory[(idx >> 1) as 4][(2 + modulo) as 3] as 1;
    assign led3   = memory[(idx >> 1) as 4][(3 + modulo) as 3] as 1;
}
